// NOTE: If we modify this file, we need to update the stubs by running:
// make generate_rpc_stubs

syntax = "proto3";
package coordinator;

import "google/protobuf/empty.proto";

// Coordinator service definition.
//
// The coordinator service is used to coordinate document ingestion and
// retrieval workflows with the extractor workers. We choose gRPC for this
// service because Protobuf provides effcient data transfer between the
// coordinator and the workers.
service Coordinator {
    // Checks if the coordinator service is running.
    rpc Heartbeat(google.protobuf.Empty) returns (HeartbeatResponse) {}

    // Adds an extraction worker to the coordinator service.
    rpc RegisterWorker(RegisterWorkerRequest) returns (google.protobuf.Empty) {}

    // Updates the document record in the database.
    rpc UpdateDocument(UpdateDocumentRequest) returns (google.protobuf.Empty) {}

    // Creates chunk records from the extracted document content.
    rpc CreateChunk(CreateChunkRequest) returns (google.protobuf.Empty) {}
}

message HeartbeatResponse {
    string version = 1;
}

message RegisterWorkerRequest {
    string id = 1;
    string address = 2;
}

enum DocumentStatus {
    PENDING = 0;
    PROCESSING = 1;
    COMPLETED = 2;
    FAILED = 3;
}

message UpdateDocumentRequest {
    string namespace = 1;
    string document_id = 2;
    DocumentStatus status = 3;
}

message CreateChunkRequest {
    string namespace = 1;
    string document_id = 2;
    repeated Chunk chunks = 3;
}

message Chunk {
    uint32 page = 1;
    repeated string headings = 2;
    string content = 3;
}
